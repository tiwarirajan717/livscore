[{"/home/rajan/lul/livscore/src/index.js":"1","/home/rajan/lul/livscore/src/App.js":"2","/home/rajan/lul/livscore/src/reportWebVitals.js":"3","/home/rajan/lul/livscore/src/components/Navbar.js":"4","/home/rajan/lul/livscore/src/components/MyCard.js":"5","/home/rajan/lul/livscore/src/api/Api.js":"6"},{"size":288,"mtime":1615626431442,"results":"7","hashOfConfig":"8"},{"size":945,"mtime":1615635010195,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1615526731537,"results":"10","hashOfConfig":"8"},{"size":382,"mtime":1615904364059,"results":"11","hashOfConfig":"8"},{"size":4115,"mtime":1615904503691,"results":"12","hashOfConfig":"8"},{"size":629,"mtime":1615635888672,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"pajz6t",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/home/rajan/lul/livscore/src/index.js",[],["30","31"],"/home/rajan/lul/livscore/src/App.js",["32","33"],"import './App.css';\nimport { useState, useEffect, Fragment } from 'react'\nimport MyCard from './components/MyCard';\nimport Navbar from './components/Navbar';\nimport { getMatches } from './api/Api';\nimport { Grid } from '@material-ui/core';\n\nfunction App() {\n\n  const [matches, setMatches] = useState([])\n\n  useEffect(() => {\n    {\n      getMatches()\n        .then((data) => {\n          setMatches(data.matches)\n          console.log(data.matches)\n        })\n        .catch((error) => alert(\"could not load data\"))\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Grid container>\n        <Grid sm=\"3\"></Grid>\n        <Grid sm=\"6\">\n          {matches.map((match) => (\n            <Fragment key={match.unique_id}>\n              {match.type == \"Twenty20\" ? (<MyCard key={match.unique_id} match={match} />) : (\"\")}\n            </Fragment>\n          ))}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","/home/rajan/lul/livscore/src/reportWebVitals.js",[],"/home/rajan/lul/livscore/src/components/Navbar.js",[],"/home/rajan/lul/livscore/src/components/MyCard.js",["34"],"import React from 'react'\nimport { useState } from 'react'\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    Typography,\n    Grid,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    DialogActions,\n    DialogContentText\n} from '@material-ui/core';\nimport vs from '../images/vs.png'\nimport { getMatchDetail } from '../api/Api';\n\nconst MyCard = ({ match }) => {\n\n    const [detail, setDetail] = useState({})\n\n    const [open, setOpen] = useState(false)\n\n    const handleClick = (id) => {\n        getMatchDetail(id)\n            .then((data) => {\n                console.log(\"Match Data\", data)\n                setDetail(data)\n                handleOpen()\n            })\n            .catch((error) => console.log(error))\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const handleOpen = () => {\n        setOpen(true)\n    }\n\n    return (\n        <>\n            <Card style={{ marginTop: 20 }}>\n                <CardContent>\n                    <Grid container justify=\"center\" alignItems=\"center\" spacing={6}>\n                        <Grid item>\n                            <Typography>\n                                <span style={{ fontSize: 12 }}>\n                                    {match[\"team-1\"]}\n                                </span>\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <img style={{ width: 20 }} src={vs} />\n                        </Grid>\n                        <Grid item>\n                            <Typography>\n                                <span style={{ fontSize: 12 }}>\n                                    {match[\"team-2\"]}\n                                </span>\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <Grid container justify=\"center\">\n                        <Button\n                            onClick={() => handleClick(match.unique_id)}\n                            item\n                            variant=\"outlined\"\n                            color=\"primary\">\n                            Show Detail\n                </Button>\n                        <Button\n                            style={{ marginLeft: 10 }}\n                            item variant=\"outlined\"\n                            color=\"primary\">\n                            Start Time {new Date(match.dateTimeGMT).toLocaleString()}\n                        </Button>\n                    </Grid>\n                </CardActions>\n            </Card>\n\n            <Dialog open={open} onClose={() => handleClose()}>\n                <DialogTitle id=\"aleart-dialog-title\">{\"Match Detail...\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Typography>{detail.stat}</Typography>\n                        <Typography>\n                            Match\n                        <span\n                                style={{\n                                    fontStyle: \"italic\",\n                                    fontWeight: \"bold\"\n                                }}>\n                                {detail.matchStarted ? \"Started\" : \"Still not started\"}\n                            </span>\n                        </Typography>\n                        <Typography>\n                            Score\n                        <span style={{\n                                fontStyle: \"italic\",\n                                fontWeight: \"bold\"\n                            }}>\n                                {detail.score}\n                            </span>\n                        </Typography>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}\n                        color=\"primary\"\n                        autoFocus>\n                        Close\n                </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\nexport default MyCard\n","/home/rajan/lul/livscore/src/api/Api.js",["35"],"import { ErrorOutlineSharp } from \"@material-ui/icons\";\n\nconst API_KEY = \"QLqDABGoIBhgCqf2452s0uag8qx1\"\n\n//get all the upcoming matches\n\nexport const getMatches = () => {\n    const url = `https://cricapi.com/api/matches/?apikey=${API_KEY}`;\n    return fetch(url)\n        .then((response) => response.json())\n        .catch((error) => console.log(\"Error:\", error))\n}\n\n//load match detail\n\nexport const getMatchDetail = (id) => {\n    const url = `https://cricapi.com/api/cricketScore/?apikey=${API_KEY}&unique_id=${id}`;\n    return fetch(url)\n        .then(response => response.json())\n        .catch(error => console.log(error))\n}",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":13,"column":5,"nodeType":"42","messageId":"43","endLine":20,"endColumn":6},{"ruleId":"44","severity":1,"message":"45","line":31,"column":27,"nodeType":"46","messageId":"47","endLine":31,"endColumn":29},{"ruleId":"48","severity":1,"message":"49","line":56,"column":29,"nodeType":"50","endLine":56,"endColumn":67},{"ruleId":"51","severity":1,"message":"52","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":27},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'ErrorOutlineSharp' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]